meta {
  name: 450-modify-new-serv
  type: http
  seq: 5
}

patch {
  url: {{WEB_URL}}/irc/serverlist?index={{IRC_SERVER_INDEX}}
  body: json
  auth: none
}

params:query {
  index: {{IRC_SERVER_INDEX}}
}

headers {
  Accept: application/json
  CSRF-Token: {{CSRF_TOKEN}}
  Content-Type: application/json
}

body:json {
  {
    "index": {{IRC_SERVER_INDEX}},
    "disabled": true,
    "group": 2,
    "name": "local-server2",
    "host": "127.0.0.2",
    "port": 6668,
    "tls": true,
    "verify": true,
    "proxy": true,
    "reconnect": true,
    "logging": true,
    "password": "test1",
    "saslUsername": "testsp1",
    "saslPassword": "testsp2",
    "identifyNick": "test2",
    "identifyCommand": "test3",
    "nick": "myNick2",
    "altNick": "myNick3",
    "recoverNick": true,
    "user": "myUser2",
    "real": "myRealName2",
    "modes": "+iwww",
    "channelList": "#test, #test2, #test3, #test4"
  }
  
}

assert {
  res.status: eq 200
  res.body.status: contains success
  res.body.index: eq {{IRC_SERVER_INDEX}}
  res.body.method: eq PATCH
}

docs {
  # Route
  
  PATCH /irc/serverlist
  
  # Description
  
  This route will modify the previously created new IRC server definition.
  
  # Request Parameters
  
  Query parameter: index number `index=6` (number will change)
  
  The POST request must include an application/json encoded JSON object containing key/value pairs that will be modified by the PATCH request. It is not necessary to include unchanged values.
  
  ```JSON
  {
    "index": 6,
    "disabled": true,
    "group": 2,
    "name": "local-server2",
    "host": "127.0.0.2",
    "port": 6668,
    "tls": true,
    "verify": true,
    "proxy": true,
    "reconnect": true,
    "logging": true,
    "password": "test1",
    "saslUsername": "testsp1",
    "saslPassword": "testsp2",
    "identifyNick": "test2",
    "identifyCommand": "test3",
    "nick": "myNick2",
    "altNick": "myNick3",
    "recoverNick": true,
    "user": "myUser2",
    "real": "myRealName2",
    "modes": "+iwww",
    "channelList": "#test, #test2, #test3, #test4"
  }
  ```
  
  # Response Data
  
  The request will return an application/json encoded JSON object showing the result of the request.
  
  ```json
  {
    "status": "success",
    "method": "PATCH",
    "index": 6
  }
  ```
}
