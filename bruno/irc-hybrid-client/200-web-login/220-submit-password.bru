meta {
  name: 220-submit-password
  type: http
  seq: 2
}

post {
  url: {{WEB_URL}}/login-authorize?nonce={{LOGIN_NONCE}}
  body: formUrlEncoded
  auth: none
}

params:query {
  nonce: {{LOGIN_NONCE}}
}

headers {
  Content-Type: application/x-www-form-urlencoded
  Accept: text/html
}

body:json {
  {
      
  }
}

body:form-urlencoded {
  _csrf: {{CSRF_TOKEN}}
  user: {{WEB_USERNAME}}
  password: {{WEB_PASSWORD}}
}

assert {
  res.status: eq 302
  res.headers.location: eq /irc/webclient.html
}

docs {
  # Route
  
  POST /login-authorize
  
  # Description
  
  This request will present the user with a login form for the user to enter their username and password.
  
  # Request Parameters
  
  The post request must include application/x-www-form-urlencoded data including the user's login credentials.
  
  - A valid random nonce must be provided as a URL query parameter.
  - A valid CSRF token as form data.
  - The users username as form data.
  - The users username as form data.
  
  # Response Data
  
  If the login credentials are accepted, the request will return a HTTP status 302 redirect with a location header redirecting the user's web browser to the "/irc/webclient.html" route.
  
  Critical to testing, the response will include a new session cookie. Bruno will automatically store the cookie in Bruno's cookie jar.
  
  If the login fails, a HTTP status 302 redirect will return the user's web browser to the GET /login route for re-entry of login credentials.
  
  ## Testing Note:
  
  In order for the web server to accept authenticated http requests, the test client must provide a valid session cookie and a valid CSRF token. These are obtain by a three step login process in this seciton.
  
  Each of the following requests must be run individually in sequence. Attempting to use Bruno's running will result in missing data in the runtime variables.
  
  - 1 Request: 210-login form
  - 2 Request: 220-submit password
  - 3 Request: 230-get-csrf-token
  
}
